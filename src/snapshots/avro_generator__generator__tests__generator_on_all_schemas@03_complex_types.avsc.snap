---
source: src/generator.rs
expression: formatted_code
input_file: src/test_schemas/03_complex_types.avsc
---
pub mod com {
    pub mod example {
        pub mod complex {
            #[derive(Debug, PartialEq, Clone, serde::Serialize, serde::Deserialize)]
            pub struct UserProfile {
                pub user_id: i64,
                pub aliases: Vec<String>,
                pub profile_data: std::collections::HashMap<String, String>,
                #[serde(default = default_last_known_ip)]
                pub last_known_ip: Option<String>,
                pub last_login_type: UnionStringi64,
            }
            fn default_last_known_ip() -> Option<String> {
                None
            }
            #[derive(Debug, PartialEq, Clone)]
            #[serde(remote = "Self")]
            pub enum UnionStringi64 {
                String(String),
                Long(i64),
            }
            impl From<String> for UnionStringi64 {
                fn from(v: String) -> Self {
                    Self::String(v)
                }
            }
            impl From<i64> for UnionStringi64 {
                fn from(v: i64) -> Self {
                    Self::Long(v)
                }
            }
            impl TryFrom<UnionStringi64> for String {
                type Error = UnionStringi64;
                fn try_from(v: UnionStringi64) -> Result<Self, Self::Error> {
                    if let UnionStringi64::String(v) = v { Ok(v) } else { Err(v) }
                }
            }
            impl TryFrom<UnionStringi64> for i64 {
                type Error = UnionStringi64;
                fn try_from(v: UnionStringi64) -> Result<Self, Self::Error> {
                    if let UnionStringi64::Long(v) = v { Ok(v) } else { Err(v) }
                }
            }
            impl serde::Serialize for UnionStringi64 {
                fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
                where
                    S: serde::Serializer,
                {
                    match self {
                        Self::String(value) => value.serialize(serializer),
                        Self::Long(value) => value.serialize(serializer),
                    }
                }
            }
            impl<'de> serde::Deserialize<'de> for UnionStringi64 {
                fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
                where
                    D: serde::Deserializer<'de>,
                {
                    struct UnionVisitor;
                    impl<'de> serde::de::Visitor<'de> for UnionVisitor {
                        type Value = UnionStringi64;
                        fn expecting(
                            &self,
                            formatter: &mut std::fmt::Formatter,
                        ) -> std::fmt::Result {
                            formatter::write_str(
                                format!(" {}", stringify!(UnionStringi64)).as_str(),
                            )
                        }
                        fn visit_str<E>(self, value: &str) -> Result<Self::Value, E>
                        where
                            E: serde::de::Error,
                        {
                            Ok(UnionStringi64::String(value.into()))
                        }
                        fn visit_i64<E>(self, value: i64) -> Result<Self::Value, E>
                        where
                            E: serde::de::Error,
                        {
                            Ok(UnionStringi64::Long(value.into()))
                        }
                    }
                    deserializer.deserialize_any(UnionVisitor)
                }
            }
        }
    }
}
